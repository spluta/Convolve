TITLE:: Convolve
summary:: Language-Side File and Buffer Convolution
categories:: Undocumented classes
related:: Classes/Signal

DESCRIPTION::
Sometimes you just want to Convolve two Files or Buffers

Takes two files or two buffers and returns a buffer which is a convolution of the two. Works with mono and stereo sources and sound files of almost any duration.

Uses Signal.convolve from the SignalBox Quark. Thanks to Jo Anderson for that excellent extension.

CLASSMETHODS::

METHOD:: fileConvolve
argument:: server

The server on which to load the buffers. Will boot the

argument:: source

A sound file of any duration, up to two channels. The output should be able to be up to 2**27 frames.

argument:: impulse

A sound file of any duration, up to two channels. The output should be able to be up to 2**27 frames.

argument:: action

The function to be completed when the process is done. The function will be passed the convolved buffer.

METHOD:: bufConvolve
argument:: server

The server on which to load the buffers. Will boot the

argument:: source

A buffer of any duration, up to two channels. The output should be able to be up to 2**27 frames.

argument:: impulse

A buffer of any duration, up to two channels. The output should be able to be up to 2**27 frames.

argument:: action

The function to be completed when the process is done. The function will be passed the convolved buffer.

METHOD:: convBuf

Access to the convolved buffer once the process has completed. Will be overwritten on the next convolution process.

METHOD:: convArray

Access to the convolved array channels once the process has completed. Will be overwritten on the next convolution process.

INSTANCEMETHODS::


EXAMPLES::

code::
//a simple  example
Convolve.fileConvolve(s, Platform.resourceDir +/+ "sounds/a11wlk01.wav", Platform.resourceDir +/+ "sounds/a11wlk01.wav", {|buf| c = buf;});

Convolve.convBuf.play;
c.play;

//use your own files - I am sure you can come up with something better
//something like this is far more interesting

a = Buffer.read(s, "/myDocs/bees.aif");
b = Buffer.read(s, "/myDocs/ThrillerChord.aiff");
Convolve.bufConvolve(s, a, b, {|buf| d = buf});
d.play
::